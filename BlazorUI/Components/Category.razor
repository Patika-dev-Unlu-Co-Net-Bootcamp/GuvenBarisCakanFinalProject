@page "/categories"
@using UnluCoProductCatalog.Application.ViewModels.CategoryViewModels
@using BlazorUI.Common
@using Microsoft.AspNetCore.Http.Extensions
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using UnluCoProductCatalog.Application.ViewModels.ProductViewModels
@implements IDisposable
@inject IHttpClientFactory ClientFactory
@inject Common.StateContainerService stateContainerService
@inject NavigationManager uriHelper

@if (Categories is null)
{

    <p><em>Loading...</em></p>
}

else
{

    <div class="list-group">

        @foreach (var category in Categories)
        {
            <button type="button" class="list-group-item list-group-item-action" @onclick="() => { if (category != null) SetSelect(category.Id); }">@category.CategoryName</button>
        }

    </div>
    <h1>@Id</h1>
}

@code {
    public IEnumerable<CategoryViewModel> Categories { get; set; }
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:3000/api/Categories/");

        var response = await client.SendAsync(request);

        stateContainerService.OnStateChange += StateHasChanged;

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            Categories = JsonConvert.DeserializeObject<IEnumerable<CategoryViewModel>>(json);
        }
    }

    private void SetSelect(int id)
    {
        stateContainerService.SetValue(id);
        uriHelper.NavigateTo($"/");
    }

    public void Dispose()
    {
        stateContainerService.OnStateChange -= StateHasChanged;
    }

}